
library IEEE;
use IEEE.std_logic_1164.all; -- std_logic e std_logic_vector
use IEEE.numeric_std.all; -- unsigned: array of std_logic

entity usb_interface is
	port(
		clock        : in std_logic;
		reset        : in std_logic;
		extrasOut    : out std_logic_vector(1 downto 0);
		extrasIn     : in  std_logic_vector(1 downto 0);
		otg_data_15  : inout std_logic_vector(15 downto 0);
		otg_addre_1  : out   std_logic_vector(1 downto 0);
		otg_chpse_n  : out   std_logic;
		otg_write_n  : out   std_logic;
		otg_read_n   : out   std_logic;
		otg_interrp  : in    std_logic;
		otg_reset_n  : out   std_logic
	);
end usb_interface;

architecture usb_interface_behav of usb_interface is

	-- Maquina de estados
	type state_type is (
		st_controle_speed, st_done,
		st_reset
		);
	signal state   : state_type;

--	signal dado_write    : std_logic_vector(15 downto 0);
--	signal dado_read     : std_logic_vector(15 downto 0);
--
--	signal address_write : std_logic_vector(15 downto 0);
--	signal address_read  : std_logic_vector(15 downto 0);
--
	signal cs, rd, wr    : std_logic;
--
--	signal status  : std_logic_vector(15 downto 0);
--	
	signal clockCY7C6200 : std_logic := '0';

	signal memoria : std_logic;
	signal requisicao : std_logic;
	signal rw : std_logic;


begin
	otg_chpse_n <= cs;
	otg_write_n <= wr;
	otg_read_n  <= rd;

	process (clockCY7C6200)
	begin
		-- reseta todos os dados
		if reset = '1' then
			state <= st_reset;
		else 
			if (clockCY7C6200'event and clockCY7C6200 = '1') then
				case state is
					-- Reset todo o processo
					when st_reset =>
						if (reset = '0') then
							state <= st_controle_speed;
						end if;


					when st_controle_speed =>
					if (memoria = '0') then
						if (requisicao = '1') then
							state <= st_done;
						end if;
					end if;


					when others =>

				end case;
			end if;
		end if;
	end process;






	process (clockCY7C6200)
	begin
		if (reset = '1') then

					otg_data_15         <= x"0000";
					otg_chpse_n         <= '1';

					otg_write_n         <= '1';
					otg_read_n          <= '1';
					otg_reset_n         <= '0';

--					dado_write          <= x"0000";
--					dado_read           <= x"0000";
--					address_write       <= x"0000";
--					address_read        <= x"0000";

					cs                  <= '1';
--					rd                  <= '1';
--					wr                  <= '1';    

--					status              <= x"0000";
--					action              <= "001";

					memoria             <= '1';
					requisicao          <= '0';
		else
			if (rising_edge(clockCY7C6200)) then
				case state is



					when st_controle_speed =>
						if (memoria = '1') then
							if (requisicao = '0') then
								-- pag 14 - Controle de speed
								otg_addre_1         <= "10";
								otg_data_15         <= x"C008";
								requisicao          <= '1';
								rw                  <= '0';
							else 
								requisicao          <= '0';
								memoria             <= '0';
							end if;
						else 
							if (requisicao = '0') then
								-- pag 14 - Controle de speed
								otg_addre_1         <= "00";
								otg_data_15         <= "000000000000" & "0000";
								requisicao          <= '1';
								rw                  <= '0';
							else 
								requisicao          <= '0';
							end if;
						end if;


	--				when st_controle_energia =>
	--					-- pag 15 - Controle de energia
	--					otg_addre_1         <= "00";
	--					otg_data_15         <= "0_1_0_11_0_001_00_Z_00";
	--					cs                  <= '0';
	--					wr                  <= '0';

	--				when st_controle_interrupcao =>
	--					-- pag 15 - Controle de energia
	--					otg_addre_1         <= "00";
	--					otg_data_15         <= "000_10_0_11011_1_0111";
	--					cs                  <= '0';
	--					wr                  <= '0';
	--
	--
	--				when st_envia_dado =>
	--					otg_addre_1         <= "00";
	--					otg_data_15         <= x"00AA";
	--					cs                  <= '0';
	--					wr                  <= '0';


						when others =>
					end case;
				end if;
			end if;
	end process;

	
	process (clockCY7C6200) 
	begin
		if (rising_edge(requisicao)) then
			cs <= '0';
		end if;

		if (cs = '0') then 
			if (rw = '1') then
				rd <= '0';
				wr <= '1';
			else 
				rd <= '1';
				wr <= '0';
			end if;
			cs <= '1';
		else 
			rd <= '1';
			wr <= '1';
		end if;
	end process;	
	

	process (clock) 
	begin
		if (rising_edge(clock)) then
			clockCY7C6200 <= not clockCY7C6200;
		end if;
	end process;
end usb_interface_behav;


